8.2.0.173 Jan 24, 2020
	Now using Visual Studio 2019.
8.2.0.172 Jan 22, 2020
	abandoned Win32_Interop (MS) library is no longer used, but SockCompat from hiredis.	
	This reduced building complexity and the latest hiredis from Github could be pulled.
8.2.0.170 December 27,2019
	Fixes the Redis connection pool
8.2.0.166
	Fixes the LiquidCookie feature.
8.2.0.162
	Fixes a crash after using Cache.ExpireKeyAt. The expired key, was not
	handled when getting the member keys after using MGET
8.2.0.161	
	Fixes multidemensional array persistance for the Application Cache.
8.2.0.160
	Fixes array persistance that could cause crashes.
	Fixes a problem when a session was expired, but retried in a browser, an exception ocurred.
	.NET arrays, which Classic ASP cannot read, now are kept in sync.
8.2.0.158
	Fixes cache.removeall() which caused a crash.
	Note, that the cache feature, needs to be licensed seperately.
	Add the key like this for the demo.
	<add key="ispsession_io:CacheLicense" value="F01FB5D0BCA6CE4C8CC773916F281C32"/>
	
8.2
	Interface
	=========
	ISP Session now supports a global application cache. This works like the native Application object.
	The following interface is supported.
	Set Cache = Server.CreateObject("NWCTools.CApplication")
	Dim val, keyIndex, key
        val = Cache("mykey")
        Cache("mykey") = "Testing"
	Or 
	Set Cache("myRs") = MyRs (e.g. ADO or other persistable stuff go here)
	key = Cache.Key(1) 'result mykey
	For Each v in Cache
	     key = v
        Next
	Cache.Remove "key"
        Cache.RemoveAll
	Cache.Lock "key" and Cache.Unlock "key" are future feature
	Cache.ExpireKeyAt "key", 0 'in 0 ms expire it
	Dim exists, keyType
	exists = Cache.Exists("key")
	keyType = Cache.KeyType("mykey") ' retuns 8 which equals the constant VbString
	Facts
	=========
	8.2 now completely depends on Web.Config. There is no CSession.Dll.config (which includes the license) 
		anymore, in order to be consistent with ISP Session for .NET
	
	
8.0.0.x anything before 8.0 was SQL based and therefore not relevant. ISP Session has a history back to 2001.
	8.0.0.x uses now a Redis server to store session state. It is compatible with a .NET Session combined with ISP Session .NET
8.0.0.144
Now, ISP Session will check an environment variable for the REDIS connection string.
e.g. if you have a redis connection string, defined as environment variable (system or user) named REDIS_SERVER
it will be retrieved. Anything else which is not environment variable, must be a valid connection string.
<add key="ispsession_io:DataSource" value="REDIS_SERVER" />    

8.0.0.149 password and database now correctly parsed from connection string.
8.2.0.151. New class CApplication, which functions as a global cache.
Set Cache = Server.CreateObject("NWCTools.CApplication")

The following methods are supported
Cache("key") = variant
Set Cache("key") = ObjectInstance 

MyKey = Cache.Key(1) 'returns e.g. "counter"
For Each k in Cache
    Response.Write Cache(k)
Next
Cache.RemoveKey "counter"
Cache.RemoveAll ' removes all keys
Cache.LockKey "counter" ' not yet implemented
Cache.UnlockKey "counter" 'not yet implemented
Cache.ExpireKeyAt "counter", 1000 ' 1000 ms=1 second
If Cache.KeyExists("counter") THen ...
VarKeyType = Cache.KeyType("counter") 'e.g. vbLong = 3

8.2.0.156
Initializing cache settings, using Application_Start within global.asa
now is (a)tested.