// This file will be processed by the MIDL tool to
// produce the type library (Temp2.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(4EB7D29B-2455-4B1F-84F5-0EFE5C5FEC07),
	dual,
	oleautomation,
	pointer_default(unique)
] 

interface INWCVariantDictionary : IDispatch 
{	[propget,helpstring("indexer"),id(0)] HRESULT  Item([in] VARIANT varKey, [out,retval] VARIANT *pVal);
	[propput,helpstring("indexer"),id(0)] HRESULT  Item([in] VARIANT varKey, [in] VARIANT newVal);
	[propputref,helpstring("indexer"),id(0),defaultcollelem] HRESULT  Item([in] VARIANT varKey, [in] VARIANT newVal);
	[propget,helpstring("Returns the keyname at specified index")] HRESULT  Key([in] VARIANT KeyIndex, [out,retval] VARIANT *pVal);
	[propget,helpstring("returns the number of key/value combinations.")] HRESULT  Count([out,retval] int *pVal);
	[id(-4),restricted] HRESULT  _NewEnum([out,retval] IUnknown **pVal);
	[helpstring("removes the specified key from the collection")] HRESULT  Remove([in] VARIANT varKey);
	[helpstring("removes all key value combinations")] HRESULT  RemoveAll();
	[propget,helpstring("returns true if the key specified, exists")] HRESULT  Exists([in] VARIANT vKey, [out,retval] VARIANT_BOOL *pVal);
	[propget,helpstring("gets the variant data type of this item")] HRESULT  VarType([in] VARIANT vKey, [out,retval] SHORT *pVal);
	[propget] HRESULT  CaseSensitive([out,retval] VARIANT_BOOL *pVal);
	[propput] HRESULT  CaseSensitive([in] VARIANT_BOOL newVal);
	[helpstring("Forces a persistable object to persist. Especially for ADO")] HRESULT Persist(VARIANT varKey);
};


[odl,uuid(4A7DEB90-B069-11D0-B373-00A0C90C2BD8), hidden,oleautomation]
interface IVariantDictionary2 : IUnknown
{
	[restricted] HRESULT GetTypeInfoCount2(UINT *pctinfo);//idispatch stubs
	[restricted] HRESULT GetTypeInfo2(UINT iTInfo, LCID lcid, UINT **ppTInfo);
	[restricted] HRESULT GetIDsOfNames2( UINT* riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
	[restricted] HRESULT Invoke2(DISPID dispIdMember,UINT* riid,LCID lcid,WORD wFlags,UINT *pDispParams,VARIANT *pVarResult,UINT *pExcepInfo,UINT *puArgErr);

    [propget] HRESULT Item2([in] VARIANT VarKey, [out, retval] VARIANT* pvar);
    [propput] HRESULT Item2([in] VARIANT VarKey, [in] VARIANT pvar);
	[propputref]HRESULT Item2([in] VARIANT VarKey, [in] VARIANT pvar);
    [propget] HRESULT Key2([in] VARIANT VarKey, [out, retval] VARIANT* pvar);
    [propget] HRESULT Count2([out, retval] int* cStrRet);
    [propget, restricted] HRESULT _NewEnum2([out, retval] IUnknown** ppEnumReturn);
    HRESULT Remove2([in] VARIANT VarKey);
    HRESULT RemoveAll2();
};

//original MS definition
[odl, uuid(D97A6DA0-A865-11CF-83AF-00A0C90C2BD8),hidden,oleautomation]
	interface ISessionObject2 : IUnknown // cannot use IDispatch
	{
	[restricted] HRESULT GetTypeInfoCount2(UINT *pctinfo);//idispatch stubs
	[restricted] HRESULT GetTypeInfo2(UINT iTInfo, LCID lcid, UINT **ppTInfo);
	[restricted] HRESULT GetIDsOfNames2( UINT* riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
	[restricted] HRESULT Invoke2(DISPID dispIdMember,UINT* riid,LCID lcid,WORD wFlags,UINT *pDispParams,VARIANT *pVarResult,UINT *pExcepInfo,UINT *puArgErr);

    [propget] HRESULT Value2(
                    [in] BSTR bstrValue, 
                    [out, retval] VARIANT* pvar);
    [propput] HRESULT Value2(
                    [in] BSTR bstrValue, 
                    [in] VARIANT pvar);
    [propputref] HRESULT Value2(
                    [in] BSTR bstrValue, 
                    [in] VARIANT pvar);
    [propget] HRESULT Timeout2([out, retval] LONG* plvar);
    [propput] HRESULT Timeout2([in] LONG plvar);
    HRESULT Abandon2();
    [propget] HRESULT CodePage2([out, retval] LONG* plvar);
    [propput] HRESULT CodePage2([in] LONG plvar);
    [propget] HRESULT LCID2([out, retval] LONG* plvar);
    [propput] HRESULT LCID2([in] LONG plvar);
    [propget] HRESULT StaticObjects2([out, retval] IVariantDictionary2** ppTaggedObjects);
    [propget] HRESULT Contents2([out, retval] IVariantDictionary2** ppProperties);
};

	//our extended ISession definition
[
	object,
	uuid(A84D5FFF-6EB4-4211-82E6-045C74F3CB6B),
	dual,
	oleautomation,
	pointer_default(unique)

] 
interface INWCSession : IDispatch 
{	
	//called internally by IIS when used with Server.CreateObject
	HRESULT OnStartPage([in] IUnknown* p);
	HRESULT OnEndPage();
	// end IIS

	[propget,helpstring("Retrieves the session key")] HRESULT  SessionID([out,retval] BSTR *pbstrRet);
	[propget,id(0),helpstring("indexer")] HRESULT  Value([in] BSTR vkey, [out,retval] VARIANT *pVal);
	[propput,id(0),helpstring("indexer")] HRESULT  Value([in] BSTR vkey, [in] VARIANT newVal);
	[propputref,id(0),helpstring("indexer")] HRESULT  Value([in] BSTR vkey, [in] VARIANT newVal);
	[propget,helpstring("Retrieves or sets the timeout value for this session")] HRESULT  TimeOut([out,retval] LONG *pVal);
	[propput,helpstring("Retrieves or sets the timeout value for this session")] HRESULT  TimeOut([in] LONG pVal);
	[helpstring("Ends this user session at end of page execution")] HRESULT  Abandon();
	[propget, hidden, helpstring("not supported")] HRESULT  CodePage([out, retval] LONG *pVal);
	[propput, hidden, helpstring("not supported")] HRESULT  CodePage([in] LONG newVal);
	[propget, hidden, helpstring("not supported")] HRESULT  LCID([out, retval] LONG *pVal);
	[propput, hidden, helpstring("not supported")] HRESULT  LCID([in] LONG newVal);
	[propget,hidden,helpstring("not supported")] HRESULT  StaticObjects([out,retval] INWCVariantDictionary **ppProperties);
	[propget,helpstring("Retrieves a reference to the internal VariantDictionary")] HRESULT  Contents([out,retval] INWCVariantDictionary **pVal);

	[propget,helpstring("Returns true if this session is continued while it has expired according to the TimeOut setting")] HRESULT  IsExpired([out,retval] VARIANT_BOOL *pVal);
	[propget,helpstring("Returns true if the session is new")] HRESULT  IsNew([out,retval] VARIANT_BOOL *pVal);
	[propget,helpstring("Retrieves or sets the LiquidCookie setting. Enable this for improved security")] HRESULT  LiquidCookie([out,retval] VARIANT_BOOL *pVal);
	[propput,helpstring("Retrieves or sets the LiquidCookie setting. Enable this for improved security")] HRESULT  LiquidCookie([in] VARIANT_BOOL newVal);
	[propget,helpstring("Retrieves or sets the ReEntrance setting. Enable to have a browser resume a session at another location, using a URL or email for instance")] HRESULT  ReEntrance([out,retval] VARIANT_BOOL *pVal);
	[propput,helpstring("Retrieves or sets the ReEntrance setting. Enable to have a browser resume a session at another location, using a URL or email for instance")] HRESULT  ReEntrance([in] VARIANT_BOOL newVal);
	[propget,helpstring("Returns a wrapped URL which always must include a Session key if you avoid cookies with your web application")] HRESULT  URL([in] VARIANT strCheckA, [out,retval] VARIANT *pVal);

	[helpstring("Replacement for Server.Execute")] HRESULT  Execute([in] BSTR ToPage);
	[helpstring("Replacement for Server.Transfer")] HRESULT  Transfer([in] BSTR ToPage);
	[propget,helpstring("Compatible with Visual 6 persistable COM components")] HRESULT  CreateInstance([in] BSTR progid, [out,retval] IDispatch **pVal);
	[propput,helpstring("Optimizes performance behaviour by reading only the state")] HRESULT  Readonly([in] VARIANT_BOOL newVal);
	
	
	[helpstring("returns dictionary containing Session statistics")] 
	HRESULT Statistics([in, optional] VARIANT vAppKey, [in,optional] VARIANT vSessionID, [out, retval] INWCVariantDictionary** retVal);
	[helpstring("ensures that current page, has a GUID variable in the QueryString")]
	HRESULT EnsureURLCookie();
	
	[propget, helpstring("returns the old SessionID after a liquid cookie refresh has ocurred")] 
	HRESULT OldSessionID ([out, retval] BSTR *pVal);	



};




[ version(1.0), uuid(A51465F8-E60A-4645-8DFE-F0F1DE91DC80), helpstring("CSession 1.0 Type Library") ]
library ISPCSession
{
	importlib("stdole2.tlb");

	[
		noncreatable,
		aggregatable,
		version(1.0),
		uuid(94764678-7F98-4CD8-88E9-FA83D776135C),
		helpstring("dictionary which stores key/value pairs.")
	] 

	coclass CVariantDictionary 
	{
		interface INWCVariantDictionary;
	};
	

	[
		aggregatable,
		version(1.0),
		uuid(D64ABC73-3B0E-4E85-92CD-215B03CAC996),		
		helpstring("Classic ASP Session replacement & ASP.NET compatibility layer")
	] 

	coclass NWCSession 
	{
		interface INWCSession;
	};

	
}